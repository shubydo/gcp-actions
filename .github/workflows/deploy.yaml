name: 'Deploy'

on:
  push:
    branches: [ "main" ]
    tags: ["v*.*.*"]

env:
  TERRAFORM_VERSION: 1.3.3

permissions:
  contents: read

jobs:
  deploy_dev:
    name: 'Terraform format and deploy to dev'
    runs-on: ubuntu-latest
    # Scopes secrets and deployment history to github "dev" environment (NOTE: Repo level secrets are still accessible)
    environment: dev
    env:
      GOOGLE_CREDENTIALS: "${{ secrets.GOOGLE_CREDENTIALS }}" 

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        version: ${{ env.TERRAFORM_VERSION }}
    
    # Move steps to separate file
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check 
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Initalize backend
      run: terraform init -backend-config="bucket=${{ secrets.GCP_BUCKET_NAME }}"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false


  deploy_prod:
      name: 'Prod deploy'
      runs-on: ubuntu-latest
      environment: prod
      needs: deploy_dev
      env:
        GOOGLE_CREDENTIALS: "${{ secrets.GOOGLE_CREDENTIALS }}" 

      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash

      steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            version: ${{ env.TERRAFORM_VERSION }}

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Initalize backend
          run: terraform init -backend-config="bucket=${{ secrets.GCP_BUCKET_NAME }}"

        # Generates an execution plan for Terraform
        - name: Terraform Plan
          run: terraform plan -input=false

          # On push to "main", build or change infrastructure according to Terraform configuration files
          # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        - name: Terraform Apply
          if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false
